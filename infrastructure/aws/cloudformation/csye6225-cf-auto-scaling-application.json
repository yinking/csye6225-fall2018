{
  "Parameters": {
    "stackName": {
      "Type": "String"
    },
    "accountNumber": {
      "Type": "String"
    },
    "domainName": {
      "Type": "String"
    },
    "awsAccessKeyId": {
      "Type": "String"
    },
    "awsSecretKey": {
      "Type": "String"
    },
    "certificatesArn": {
      "Type": "String"
    }
  },
  "Resources": {
    "WebServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "ImageId": "ami-9887c6e7",
        "InstanceType": "t2.micro",
        "KeyName": "myKey",
        "SecurityGroups": [
          {
            "Fn::ImportValue": "csye6225webapp"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdk",
            "Ebs": {
              "DeleteOnTermination": "false",
              "VolumeSize": "20"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe ",
                "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                "systemctl start ntpd",
                "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                "chmod +x ./install",
                "./install auto",
                "rm ./install",
                "yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm -y",
                "yum install postgresql10 -y",
                "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
                "rpm -U ./amazon-cloudwatch-agent.rpm",
                "rm ./amazon-cloudwatch-agent.rpm",
                "cd /opt",
                "touch cloudwatch-config.json",
                "echo '{\"agent\": {\"metrics_collection_interval\": 10},\"logs\": {\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/catalina.out\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"},\"metrics\": {\"metrics_collected\": {\"statsd\": {\"service_address\": \":8125\",\"metrics_collection_interval\": 10,\"metrics_aggregation_interval\": 0}}}}' > cloudwatch-config.json",
                "cd /",
                "groupadd tomcat",
                "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                "cd /tmp",
                "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                "mkdir /opt/tomcat",
                "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                "cd /opt/tomcat",
                "chgrp -R tomcat /opt/tomcat",
                "chmod -R g+r conf",
                "chmod g+x conf",
                "chown -R tomcat webapps/ work/ temp/ logs/",
                "cd /usr/lib/systemd/system",
                "touch tomcat.service",
                "echo '[Unit]' > tomcat.service",
                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                "echo 'After=syslog.target network.target' >> tomcat.service",
                "echo '[Service]' >> tomcat.service",
                "echo 'Type=forking' >> tomcat.service",
                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                "echo 'User=tomcat' >> tomcat.service",
                "echo 'Group=tomcat' >> tomcat.service",
                "echo 'UMask=0007' >> tomcat.service",
                "echo 'RestartSec=10' >> tomcat.service",
                "echo 'Restart=always' >> tomcat.service",
                "echo '[Install]' >> tomcat.service",
                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                "cd /opt/tomcat/bin",
                "touch setenv.sh",
                {
                  "Fn::Join": [
                    " ",
                    [
                      "echo 'JAVA_OPTS=\"$JAVA_OPTS",
                      "-Djava.net.preferIPv4Stack=true",
                      "-Djava.net.preferIPv4Addresses=true",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "-Dspring.datasource.url=jdbc:postgresql://",
                            {
                              "Fn::ImportValue": "myRDSEndPoint"
                            },
                            ":5432/csye6225"
                          ]
                        ]
                      },
                      "-Dspring.datasource.username=csye6225master",
                      "-Dspring.datasource.password=csye6225password",
                      "-DlocalLocation=/temp/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "-DawsAccessKeyId=",
                            {
                              "Ref": "awsAccessKeyId"
                            }
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "-DawsSecretKey=",
                            {
                              "Ref": "awsSecretKey"
                            }
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "-DaccountNumber=",
                            {
                              "Ref": "accountNumber"
                            }
                          ]
                        ]
                      },
                      "\"' > setenv.sh"
                    ]
                  ]
                },
                "systemctl daemon-reload",
                "systemctl start tomcat",
                "systemctl start codedeploy-agent",
                "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",
                "cd /",
                "mkdir /temp",
                "chmod 777 /temp"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Fn::ImportValue": "myIAMInstanceProfile"
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": "mySubnet1"
          },
          {
            "Fn::ImportValue": "mySubnet2"
          },
          {
            "Fn::ImportValue": "mySubnet3"
          }
        ],
        "Cooldown": "60",
        "TargetGroupARNs": [
          {
            "Ref": "ALBTargetGroup"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "WebServerLaunchConfig"
        },
        "MinSize": "3",
        "MaxSize": "10",
        "DesiredCapacity": "3"
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH, HTTPs",
        "VpcId": {
          "Fn::ImportValue": "myVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "stackName"
            }
          }
        ]
      }
    },
    "myCodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Fn::ImportValue": "myWebapp"
        },
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "AutoScalingGroups": [
          {
            "Ref": "WebServerGroup"
          }
        ],
        "DeploymentGroupName": {
          "Fn::ImportValue": "myWebapp"
        },
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
        },
        "ServiceRoleArn": {
          "Fn::ImportValue": "CodeDeployServiceRoleArn"
        }
      }
    },
    "myDNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Type": "A",
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "domainName"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Ref": "domainName"
        },
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "DNSName"
            ]
          },
          "EvaluateTargetHealth": "true",
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ApplicationLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        }
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Fn::ImportValue": "mySubnet1"
          },
          {
            "Fn::ImportValue": "mySubnet2"
          },
          {
            "Fn::ImportValue": "mySubnet3"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ]
      }
    },
    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "certificatesArn"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ALBTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "Port": 8080,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 5,
        "VpcId": {
          "Fn::ImportValue": "myVPC"
        }
      }
    }
  },
  "Outputs": {
    "ApplicationLoadBalancer": {
      "Value": {
        "Ref": "ApplicationLoadBalancer"
      },
      "Export": {
        "Name": "ApplicationLoadBalancer"
      }
    }
  }
}
